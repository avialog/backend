// Code generated by MockGen. DO NOT EDIT.
// Source: aircraft.go
//
// Generated by this command:
//
//	mockgen -source=aircraft.go -destination=aircraft_mock.go -package service
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	dto "github.com/avialog/backend/internal/dto"
	model "github.com/avialog/backend/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAircraftService is a mock of AircraftService interface.
type MockAircraftService struct {
	ctrl     *gomock.Controller
	recorder *MockAircraftServiceMockRecorder
}

// MockAircraftServiceMockRecorder is the mock recorder for MockAircraftService.
type MockAircraftServiceMockRecorder struct {
	mock *MockAircraftService
}

// NewMockAircraftService creates a new mock instance.
func NewMockAircraftService(ctrl *gomock.Controller) *MockAircraftService {
	mock := &MockAircraftService{ctrl: ctrl}
	mock.recorder = &MockAircraftServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAircraftService) EXPECT() *MockAircraftServiceMockRecorder {
	return m.recorder
}

// DeleteAircraft mocks base method.
func (m *MockAircraftService) DeleteAircraft(userID, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAircraft", userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAircraft indicates an expected call of DeleteAircraft.
func (mr *MockAircraftServiceMockRecorder) DeleteAircraft(userID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAircraft", reflect.TypeOf((*MockAircraftService)(nil).DeleteAircraft), userID, id)
}

// GetUserAircraft mocks base method.
func (m *MockAircraftService) GetUserAircraft(userID uint) ([]model.Aircraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAircraft", userID)
	ret0, _ := ret[0].([]model.Aircraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAircraft indicates an expected call of GetUserAircraft.
func (mr *MockAircraftServiceMockRecorder) GetUserAircraft(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAircraft", reflect.TypeOf((*MockAircraftService)(nil).GetUserAircraft), userID)
}

// InsertAircraft mocks base method.
func (m *MockAircraftService) InsertAircraft(userID uint, aircraftRequest dto.AircraftRequest) (model.Aircraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAircraft", userID, aircraftRequest)
	ret0, _ := ret[0].(model.Aircraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAircraft indicates an expected call of InsertAircraft.
func (mr *MockAircraftServiceMockRecorder) InsertAircraft(userID, aircraftRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAircraft", reflect.TypeOf((*MockAircraftService)(nil).InsertAircraft), userID, aircraftRequest)
}

// UpdateAircraft mocks base method.
func (m *MockAircraftService) UpdateAircraft(userID, id uint, aircraftRequest dto.AircraftRequest) (model.Aircraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAircraft", userID, id, aircraftRequest)
	ret0, _ := ret[0].(model.Aircraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAircraft indicates an expected call of UpdateAircraft.
func (mr *MockAircraftServiceMockRecorder) UpdateAircraft(userID, id, aircraftRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAircraft", reflect.TypeOf((*MockAircraftService)(nil).UpdateAircraft), userID, id, aircraftRequest)
}
