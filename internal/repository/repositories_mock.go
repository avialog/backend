// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=repositories_mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositories is a mock of Repositories interface.
type MockRepositories struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesMockRecorder
}

// MockRepositoriesMockRecorder is the mock recorder for MockRepositories.
type MockRepositoriesMockRecorder struct {
	mock *MockRepositories
}

// NewMockRepositories creates a new mock instance.
func NewMockRepositories(ctrl *gomock.Controller) *MockRepositories {
	mock := &MockRepositories{ctrl: ctrl}
	mock.recorder = &MockRepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositories) EXPECT() *MockRepositoriesMockRecorder {
	return m.recorder
}

// Aircraft mocks base method.
func (m *MockRepositories) Aircraft() AircraftRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aircraft")
	ret0, _ := ret[0].(AircraftRepository)
	return ret0
}

// Aircraft indicates an expected call of Aircraft.
func (mr *MockRepositoriesMockRecorder) Aircraft() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aircraft", reflect.TypeOf((*MockRepositories)(nil).Aircraft))
}

// Contact mocks base method.
func (m *MockRepositories) Contact() ContactRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contact")
	ret0, _ := ret[0].(ContactRepository)
	return ret0
}

// Contact indicates an expected call of Contact.
func (mr *MockRepositoriesMockRecorder) Contact() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contact", reflect.TypeOf((*MockRepositories)(nil).Contact))
}

// Flight mocks base method.
func (m *MockRepositories) Flight() FlightRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flight")
	ret0, _ := ret[0].(FlightRepository)
	return ret0
}

// Flight indicates an expected call of Flight.
func (mr *MockRepositoriesMockRecorder) Flight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flight", reflect.TypeOf((*MockRepositories)(nil).Flight))
}

// Landing mocks base method.
func (m *MockRepositories) Landing() LandingRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Landing")
	ret0, _ := ret[0].(LandingRepository)
	return ret0
}

// Landing indicates an expected call of Landing.
func (mr *MockRepositoriesMockRecorder) Landing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Landing", reflect.TypeOf((*MockRepositories)(nil).Landing))
}

// Passenger mocks base method.
func (m *MockRepositories) Passenger() PassengerRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Passenger")
	ret0, _ := ret[0].(PassengerRepository)
	return ret0
}

// Passenger indicates an expected call of Passenger.
func (mr *MockRepositoriesMockRecorder) Passenger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Passenger", reflect.TypeOf((*MockRepositories)(nil).Passenger))
}

// User mocks base method.
func (m *MockRepositories) User() UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockRepositoriesMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRepositories)(nil).User))
}
