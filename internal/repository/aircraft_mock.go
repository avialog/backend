// Code generated by MockGen. DO NOT EDIT.
// Source: aircraft.go
//
// Generated by this command:
//
//	mockgen -source=aircraft.go -destination=aircraft_mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/avialog/backend/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAircraftRepository is a mock of AircraftRepository interface.
type MockAircraftRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAircraftRepositoryMockRecorder
}

// MockAircraftRepositoryMockRecorder is the mock recorder for MockAircraftRepository.
type MockAircraftRepositoryMockRecorder struct {
	mock *MockAircraftRepository
}

// NewMockAircraftRepository creates a new mock instance.
func NewMockAircraftRepository(ctrl *gomock.Controller) *MockAircraftRepository {
	mock := &MockAircraftRepository{ctrl: ctrl}
	mock.recorder = &MockAircraftRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAircraftRepository) EXPECT() *MockAircraftRepositoryMockRecorder {
	return m.recorder
}

// DeleteByUserIDAndID mocks base method.
func (m *MockAircraftRepository) DeleteByUserIDAndID(userID, id uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserIDAndID", userID, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByUserIDAndID indicates an expected call of DeleteByUserIDAndID.
func (mr *MockAircraftRepositoryMockRecorder) DeleteByUserIDAndID(userID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDAndID", reflect.TypeOf((*MockAircraftRepository)(nil).DeleteByUserIDAndID), userID, id)
}

// GetByUserID mocks base method.
func (m *MockAircraftRepository) GetByUserID(userID uint) ([]model.Aircraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].([]model.Aircraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockAircraftRepositoryMockRecorder) GetByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockAircraftRepository)(nil).GetByUserID), userID)
}

// GetByUserIDAndID mocks base method.
func (m *MockAircraftRepository) GetByUserIDAndID(userID, id uint) (model.Aircraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDAndID", userID, id)
	ret0, _ := ret[0].(model.Aircraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDAndID indicates an expected call of GetByUserIDAndID.
func (mr *MockAircraftRepositoryMockRecorder) GetByUserIDAndID(userID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDAndID", reflect.TypeOf((*MockAircraftRepository)(nil).GetByUserIDAndID), userID, id)
}

// Save mocks base method.
func (m *MockAircraftRepository) Save(aircraft model.Aircraft) (model.Aircraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", aircraft)
	ret0, _ := ret[0].(model.Aircraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockAircraftRepositoryMockRecorder) Save(aircraft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAircraftRepository)(nil).Save), aircraft)
}

// Update mocks base method.
func (m *MockAircraftRepository) Update(aircraft model.Aircraft) (model.Aircraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", aircraft)
	ret0, _ := ret[0].(model.Aircraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAircraftRepositoryMockRecorder) Update(aircraft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAircraftRepository)(nil).Update), aircraft)
}
