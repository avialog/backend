// Code generated by MockGen. DO NOT EDIT.
// Source: landing.go
//
// Generated by this command:
//
//	mockgen -source=landing.go -destination=landing_mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	infrastructure "github.com/avialog/backend/internal/infrastructure"
	model "github.com/avialog/backend/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockLandingRepository is a mock of LandingRepository interface.
type MockLandingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLandingRepositoryMockRecorder
}

// MockLandingRepositoryMockRecorder is the mock recorder for MockLandingRepository.
type MockLandingRepositoryMockRecorder struct {
	mock *MockLandingRepository
}

// NewMockLandingRepository creates a new mock instance.
func NewMockLandingRepository(ctrl *gomock.Controller) *MockLandingRepository {
	mock := &MockLandingRepository{ctrl: ctrl}
	mock.recorder = &MockLandingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLandingRepository) EXPECT() *MockLandingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLandingRepository) Create(landing model.Landing) (model.Landing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", landing)
	ret0, _ := ret[0].(model.Landing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLandingRepositoryMockRecorder) Create(landing any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLandingRepository)(nil).Create), landing)
}

// CreateTx mocks base method.
func (m *MockLandingRepository) CreateTx(tx infrastructure.Database, landing model.Landing) (model.Landing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", tx, landing)
	ret0, _ := ret[0].(model.Landing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockLandingRepositoryMockRecorder) CreateTx(tx, landing any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockLandingRepository)(nil).CreateTx), tx, landing)
}

// DeleteByFlightIDTx mocks base method.
func (m *MockLandingRepository) DeleteByFlightIDTx(tx infrastructure.Database, flightID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByFlightIDTx", tx, flightID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByFlightIDTx indicates an expected call of DeleteByFlightIDTx.
func (mr *MockLandingRepositoryMockRecorder) DeleteByFlightIDTx(tx, flightID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByFlightIDTx", reflect.TypeOf((*MockLandingRepository)(nil).DeleteByFlightIDTx), tx, flightID)
}

// DeleteByID mocks base method.
func (m *MockLandingRepository) DeleteByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockLandingRepositoryMockRecorder) DeleteByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockLandingRepository)(nil).DeleteByID), id)
}

// GetByFlightID mocks base method.
func (m *MockLandingRepository) GetByFlightID(flightID uint) ([]model.Landing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFlightID", flightID)
	ret0, _ := ret[0].([]model.Landing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFlightID indicates an expected call of GetByFlightID.
func (mr *MockLandingRepositoryMockRecorder) GetByFlightID(flightID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFlightID", reflect.TypeOf((*MockLandingRepository)(nil).GetByFlightID), flightID)
}

// GetByID mocks base method.
func (m *MockLandingRepository) GetByID(id uint) (model.Landing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(model.Landing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockLandingRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockLandingRepository)(nil).GetByID), id)
}

// Save mocks base method.
func (m *MockLandingRepository) Save(landing model.Landing) (model.Landing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", landing)
	ret0, _ := ret[0].(model.Landing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockLandingRepositoryMockRecorder) Save(landing any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLandingRepository)(nil).Save), landing)
}
