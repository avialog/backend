// Code generated by MockGen. DO NOT EDIT.
// Source: contact.go
//
// Generated by this command:
//
//	mockgen -source=contact.go -destination=contact_mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/avialog/backend/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockContactRepository is a mock of ContactRepository interface.
type MockContactRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactRepositoryMockRecorder
}

// MockContactRepositoryMockRecorder is the mock recorder for MockContactRepository.
type MockContactRepositoryMockRecorder struct {
	mock *MockContactRepository
}

// NewMockContactRepository creates a new mock instance.
func NewMockContactRepository(ctrl *gomock.Controller) *MockContactRepository {
	mock := &MockContactRepository{ctrl: ctrl}
	mock.recorder = &MockContactRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactRepository) EXPECT() *MockContactRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContactRepository) Create(contact model.Contact) (model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", contact)
	ret0, _ := ret[0].(model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContactRepositoryMockRecorder) Create(contact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContactRepository)(nil).Create), contact)
}

// DeleteByUserIDAndID mocks base method.
func (m *MockContactRepository) DeleteByUserIDAndID(userID, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserIDAndID", userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDAndID indicates an expected call of DeleteByUserIDAndID.
func (mr *MockContactRepositoryMockRecorder) DeleteByUserIDAndID(userID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDAndID", reflect.TypeOf((*MockContactRepository)(nil).DeleteByUserIDAndID), userID, id)
}

// GetByUserID mocks base method.
func (m *MockContactRepository) GetByUserID(userID uint) ([]model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].([]model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockContactRepositoryMockRecorder) GetByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockContactRepository)(nil).GetByUserID), userID)
}

// GetByUserIDAndID mocks base method.
func (m *MockContactRepository) GetByUserIDAndID(userID, id uint) (model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDAndID", userID, id)
	ret0, _ := ret[0].(model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDAndID indicates an expected call of GetByUserIDAndID.
func (mr *MockContactRepositoryMockRecorder) GetByUserIDAndID(userID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDAndID", reflect.TypeOf((*MockContactRepository)(nil).GetByUserIDAndID), userID, id)
}

// Save mocks base method.
func (m *MockContactRepository) Save(contact model.Contact) (model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", contact)
	ret0, _ := ret[0].(model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockContactRepositoryMockRecorder) Save(contact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockContactRepository)(nil).Save), contact)
}
